name: ci

on:
  push:
    branches:
      - 'main'

jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./zarf/docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/taraktikos/go-service:latest
            ghcr.io/taraktikos/go-service:1.0.0
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-to-ec2:
    needs: docker-build
    runs-on: ubuntu-latest
    env:
      DOCKER_HOST: "ssh://${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
          if_key_exists: fail

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CONTAINER_REGISTRY_TOKEN }}

      - name: Stop old containers
        run: docker-compose -f ./zarf/docker-compose.prod.yml down

      - name: Pull latest images
        run: docker-compose -f ./zarf/docker-compose.prod.yml pull

      - name: Docker compose up
        run: docker-compose -f ./zarf/docker-compose.prod.yml up -d

      - name: Remove unused images
        run: docker image prune -a -f

  notify-by-telegram:
    needs: deploy-to-ec2
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        run: curl -i -X GET "https://api.telegram.org/bot${{ secrets.TELEGRAM_API_KEY }}/sendMessage?chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=Bankets deployed to server http://${{ secrets.SSH_HOST }}"
